// This file is generated by flatmk-codegen. Do not edit.

/// A request to a BasicTask/BasicTaskWeak endpoint.
#[repr(i64)]
#[derive(Debug, Copy, Clone, TryFromPrimitive)]
pub enum BasicTaskRequest {
	Ping = 0,
	FetchShallowClone = 1,
	FetchCapSet = 2,
	FetchRootPageTable = 3,
	GetRegister = 4,
	SetRegister = 5,
	FetchTaskEndpoint = 6,
	FetchIpcCap = 7,
	PutIpcCap = 8,
	PutCapSet = 9,
	MakeCapSet = 10,
	MakeRootPageTable = 11,
	PutRootPageTable = 12,
	IpcReturn = 13,
	FetchWeak = 14,
	HasWeak = 15,
}

/// A request to a capability set.
#[repr(i64)]
#[derive(Debug, Copy, Clone, TryFromPrimitive)]
pub enum CapSetRequest {
	MakeLeafSet = 0,
	CloneCap = 1,
	DropCap = 2,
	FetchCap = 3,
	PutCap = 4,
	MoveCap = 6,
	GetCapType = 7,
	FetchCapMove = 8,
	PutCapMove = 9,
}

/// The type of a capability endpoint.
#[repr(i64)]
#[derive(Debug, Copy, Clone, TryFromPrimitive)]
pub enum CapType {
	Other = 0,
	TaskEndpoint = 1,
	RootPageTable = 2,
}

/// A request to an interrupt endpoint.
#[repr(i64)]
#[derive(Debug, Copy, Clone, TryFromPrimitive)]
pub enum InterruptRequest {
	Bind = 0,
	Unbind = 1,
}

/// A request to an IPC endpoint for another task.
#[repr(i64)]
#[derive(Debug, Copy, Clone, TryFromPrimitive)]
pub enum IpcRequest {
	SwitchTo = 0,
	IsCapTransfer = 1,
	IsTaggable = 2,
	IsReply = 3,
	SetTag = 4,
	GetTag = 5,
	Ping = 6,
}

/// A request to a root page table.
#[repr(i64)]
#[derive(Debug, Copy, Clone, TryFromPrimitive)]
pub enum RootPageTableRequest {
	MakeLeaf = 0,
	AllocLeaf = 1,
	PutPage = 2,
	FetchPage = 3,
	DropPage = 4,
	SetProtection = 5,
}

/// A request to the root capability.
#[repr(i64)]
#[derive(Debug, Copy, Clone, TryFromPrimitive)]
pub enum RootTaskCapRequest {
	X86IoPort = 0,
	Mmio = 1,
	MakeIdle = 2,
	Interrupt = 3,
}

bitflags! {
	/// Flags for a user page table entry.
	pub struct UserPteFlags: u64 {
		const WRITABLE = 1 << 0;
		const EXECUTABLE = 1 << 1;
	}

}

/// Capability to a root page table.
pub struct RootPageTable {
    cap: CPtr
}

impl Into<CPtr> for RootPageTable {
    fn into(self) -> CPtr {
        self.cap
    }
}

impl RootPageTable {
    pub const unsafe fn new(cap: CPtr) -> Self {
        Self {
            cap,
        }
    }

    pub const fn cptr(&self) -> &CPtr {
        &self.cap
    }

	/// Alllocates a page at a leaf entry in this root page table.
	pub unsafe fn alloc_leaf(
		&self,
		vaddr: u64,
		prot: UserPteFlags,
	) -> i64 {
		self.cap.call(RootPageTableRequest::AllocLeaf as i64, vaddr as i64, prot.bits() as i64, 0i64, )
	}

	/// Drops a page.
	pub unsafe fn drop_page(
		&self,
		target: u64,
	) -> i64 {
		self.cap.call(RootPageTableRequest::DropPage as i64, target as i64, 0i64, 0i64, )
	}

	/// Clones reference to a page in this page table to the current task's page table.
	pub unsafe fn fetch_page(
		&self,
		src: u64,
		dst: u64,
		prot: UserPteFlags,
	) -> i64 {
		self.cap.call(RootPageTableRequest::FetchPage as i64, src as i64, dst as i64, prot.bits() as i64, )
	}

	/// Creates a leaf entry in this root page table, without allocating page for it.
	pub unsafe fn make_leaf(
		&self,
		vaddr: u64,
	) -> i64 {
		self.cap.call(RootPageTableRequest::MakeLeaf as i64, vaddr as i64, 0i64, 0i64, )
	}

	/// Clones reference to a page in the current task's page table to this page table.
	pub unsafe fn put_page(
		&self,
		src: u64,
		dst: u64,
		prot: UserPteFlags,
	) -> i64 {
		self.cap.call(RootPageTableRequest::PutPage as i64, src as i64, dst as i64, prot.bits() as i64, )
	}

	/// Sets protection flags for a page table entry.
	pub unsafe fn set_protection(
		&self,
		target: u64,
		prot: UserPteFlags,
	) -> i64 {
		self.cap.call(RootPageTableRequest::SetProtection as i64, target as i64, prot.bits() as i64, 0i64, )
	}

}

