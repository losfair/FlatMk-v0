// This file is generated by flatmk-codegen. Do not edit.

// A request to a BasicTask/BasicTaskWeak endpoint.
enum BasicTaskRequest {
	BasicTaskRequest_Ping = 0,
	BasicTaskRequest_FetchShallowClone = 1,
	BasicTaskRequest_FetchCapSet = 2,
	BasicTaskRequest_FetchRootPageTable = 3,
	BasicTaskRequest_GetRegister = 4,
	BasicTaskRequest_SetRegister = 5,
	BasicTaskRequest_FetchTaskEndpoint = 6,
	BasicTaskRequest_FetchIpcCap = 7,
	BasicTaskRequest_PutIpcCap = 8,
	BasicTaskRequest_PutCapSet = 9,
	BasicTaskRequest_MakeCapSet = 10,
	BasicTaskRequest_MakeRootPageTable = 11,
	BasicTaskRequest_PutRootPageTable = 12,
	BasicTaskRequest_IpcReturn = 13,
	BasicTaskRequest_FetchWeak = 14,
	BasicTaskRequest_HasWeak = 15,
};

// A request to a capability set.
enum CapSetRequest {
	CapSetRequest_MakeLeafSet = 0,
	CapSetRequest_CloneCap = 1,
	CapSetRequest_DropCap = 2,
	CapSetRequest_FetchCap = 3,
	CapSetRequest_PutCap = 4,
	CapSetRequest_MoveCap = 6,
	CapSetRequest_GetCapType = 7,
	CapSetRequest_FetchCapMove = 8,
	CapSetRequest_PutCapMove = 9,
};

// The type of a capability endpoint.
enum CapType {
	CapType_Other = 0,
	CapType_TaskEndpoint = 1,
	CapType_RootPageTable = 2,
};

// A request to an interrupt endpoint.
enum InterruptRequest {
	InterruptRequest_Bind = 0,
	InterruptRequest_Unbind = 1,
};

// A request to an IPC endpoint for another task.
enum IpcRequest {
	IpcRequest_SwitchTo = 0,
	IpcRequest_IsCapTransfer = 1,
	IpcRequest_IsTaggable = 2,
	IpcRequest_IsReply = 3,
	IpcRequest_SetTag = 4,
	IpcRequest_GetTag = 5,
	IpcRequest_Ping = 6,
};

// A request to a root page table.
enum RootPageTableRequest {
	RootPageTableRequest_MakeLeaf = 0,
	RootPageTableRequest_AllocLeaf = 1,
	RootPageTableRequest_PutPage = 2,
	RootPageTableRequest_FetchPage = 3,
	RootPageTableRequest_DropPage = 4,
	RootPageTableRequest_SetProtection = 5,
};

// A request to the root capability.
enum RootTaskCapRequest {
	RootTaskCapRequest_X86IoPort = 0,
	RootTaskCapRequest_Mmio = 1,
	RootTaskCapRequest_MakeIdle = 2,
	RootTaskCapRequest_Interrupt = 3,
};

// Flags for a user page table entry.
#define UserPteFlags_WRITABLE (1 << 0)
#define UserPteFlags_EXECUTABLE (1 << 1)

// Capability to a root page table.
struct RootPageTable {
    CPtr cap;
};

struct RootPageTable RootPageTable_new(CPtr cap) {
    struct RootPageTable result = { .cap = cap };
    return result;
}
// Alllocates a page at a leaf entry in this root page table.
int64_t RootPageTable_alloc_leaf(
	struct RootPageTable me,
	uint64_t vaddr,
	uint64_t prot
) {
	return cptr_invoke(me.cap, RootPageTableRequest_AllocLeaf, vaddr, prot, 0ll);
}

// Drops a page.
int64_t RootPageTable_drop_page(
	struct RootPageTable me,
	uint64_t target
) {
	return cptr_invoke(me.cap, RootPageTableRequest_DropPage, target, 0ll, 0ll);
}

// Clones reference to a page in this page table to the current task's page table.
int64_t RootPageTable_fetch_page(
	struct RootPageTable me,
	uint64_t src,
	uint64_t dst,
	uint64_t prot
) {
	return cptr_invoke(me.cap, RootPageTableRequest_FetchPage, src, dst, prot);
}

// Creates a leaf entry in this root page table, without allocating page for it.
int64_t RootPageTable_make_leaf(
	struct RootPageTable me,
	uint64_t vaddr
) {
	return cptr_invoke(me.cap, RootPageTableRequest_MakeLeaf, vaddr, 0ll, 0ll);
}

// Clones reference to a page in the current task's page table to this page table.
int64_t RootPageTable_put_page(
	struct RootPageTable me,
	uint64_t src,
	uint64_t dst,
	uint64_t prot
) {
	return cptr_invoke(me.cap, RootPageTableRequest_PutPage, src, dst, prot);
}

// Sets protection flags for a page table entry.
int64_t RootPageTable_set_protection(
	struct RootPageTable me,
	uint64_t target,
	uint64_t prot
) {
	return cptr_invoke(me.cap, RootPageTableRequest_SetProtection, target, prot, 0ll);
}

